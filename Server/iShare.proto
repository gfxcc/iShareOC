// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_package = "io.grpc.examples";

package helloworld;

// The greeting service definition.
service Greeter {
// Sends a greeting
rpc SayHello (HelloRequest) returns (HelloReply) {}

// A simple RPC
//
// login rpc
rpc Login (Login_m) returns (Inf) {}

// A simple RPC
//
// sign in rpc
rpc Sign_up (Sign_m) returns (Inf) {}

// A simple RPC
//
//
rpc User_inf (Inf) returns (User_detail) {}

// A simple RPC
//
// search user by username
rpc Search_username (Inf) returns (Repeated_string) {}

// A simple RPC
//
// add new friend
rpc Add_friend (Repeated_string) returns (Inf) {}

// A simple RPC
//
// delete a friend
rpc Delete_friend (Repeated_string) returns (Inf) {}

// A simple RPC
//
// create a new share record
rpc Create_share (Share_inf) returns (Inf) {}

// A server-to-client streaming RPC
//
// start after terminal finish basic work. keep synchronism with S
rpc Syn (stream Inf) returns (stream Syn_data) {}

//
//
//
rpc Obtain_bills (Bill_request) returns (stream Share_inf) {}

//
//
//
rpc Send_Img (stream Image) returns (Inf) {}

//
//
//
rpc Receive_Img (Repeated_string) returns (stream Image) {}
}

// The request message contain username and password
message Login_m {
string username = 1;
string password = 2;
}

message Sign_m {
string username = 1;
string password = 2;
string email = 3;
}

message Inf {
string information = 1;
}

message Repeated_string {
repeated string content = 1;
}

message User_detail {
string username = 1;
string email = 2;
repeated string friends = 3;

}

message Share_inf {
string creater = 1;
string amount = 2;
string type = 3;
string account = 4;
string data = 5;
string note = 6;
string image = 7;
repeated string members = 8;
int32 members_count = 9;
string bill_id = 10;
}

message Bill_request {
string username = 1;
string start = 2;
string amount = 3;
}

message Syn_data {
string friend = 1;
string bill = 2;
string delete = 3;
}

// The request message containing the user's name.
message HelloRequest {
string name = 1;
}

// The response message containing the greetings
message HelloReply {
string message = 1;
}

message Image {
string name = 1;
bytes data = 2;
}
