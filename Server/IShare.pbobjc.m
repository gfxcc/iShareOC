// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iShare.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "IShare.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - IShareRoot

@implementation IShareRoot

@end

static GPBFileDescriptor *IShareRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"helloworld"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Login_m

@implementation Login_m

@dynamic username;
@dynamic password;

typedef struct Login_m_Storage {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *password;
} Login_m_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = Login_m_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Login_m_Storage, username),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = Login_m_FieldNumber_Password,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Login_m_Storage, password),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Login_m class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Login_m_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Sign_m

@implementation Sign_m

@dynamic username;
@dynamic password;
@dynamic email;

typedef struct Sign_m_Storage {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *password;
  NSString *email;
} Sign_m_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = Sign_m_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Sign_m_Storage, username),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = Sign_m_FieldNumber_Password,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Sign_m_Storage, password),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = Sign_m_FieldNumber_Email,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Sign_m_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Sign_m class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Sign_m_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Inf

@implementation Inf

@dynamic information;

typedef struct Inf_Storage {
  uint32_t _has_storage_[1];
  NSString *information;
} Inf_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "information",
        .number = Inf_FieldNumber_Information,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Inf_Storage, information),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Inf class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Inf_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Repeated_string

@implementation Repeated_string

@dynamic contentArray;

typedef struct Repeated_string_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *contentArray;
} Repeated_string_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentArray",
        .number = Repeated_string_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(Repeated_string_Storage, contentArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Repeated_string class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Repeated_string_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - User_detail

@implementation User_detail

@dynamic username;
@dynamic email;
@dynamic friendsArray;

typedef struct User_detail_Storage {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *email;
  NSMutableArray *friendsArray;
} User_detail_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = User_detail_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(User_detail_Storage, username),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = User_detail_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(User_detail_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "friendsArray",
        .number = User_detail_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(User_detail_Storage, friendsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[User_detail class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(User_detail_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Share_inf

@implementation Share_inf

@dynamic creater;
@dynamic amount;
@dynamic type;
@dynamic account;
@dynamic data_p;
@dynamic note;
@dynamic image;
@dynamic membersArray;
@dynamic membersCount;
@dynamic billId;

typedef struct Share_inf_Storage {
  uint32_t _has_storage_[1];
  int32_t membersCount;
  NSString *creater;
  NSString *amount;
  NSString *type;
  NSString *account;
  NSString *data_p;
  NSString *note;
  NSString *image;
  NSMutableArray *membersArray;
  NSString *billId;
} Share_inf_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creater",
        .number = Share_inf_FieldNumber_Creater,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, creater),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = Share_inf_FieldNumber_Amount,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, amount),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = Share_inf_FieldNumber_Type,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, type),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "account",
        .number = Share_inf_FieldNumber_Account,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, account),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "data_p",
        .number = Share_inf_FieldNumber_Data_p,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, data_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "note",
        .number = Share_inf_FieldNumber_Note,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, note),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "image",
        .number = Share_inf_FieldNumber_Image,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, image),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "membersArray",
        .number = Share_inf_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, membersArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "membersCount",
        .number = Share_inf_FieldNumber_MembersCount,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(Share_inf_Storage, membersCount),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "billId",
        .number = Share_inf_FieldNumber_BillId,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Share_inf_Storage, billId),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Share_inf class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Share_inf_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Bill_request

@implementation Bill_request

@dynamic username;
@dynamic start;
@dynamic amount;

typedef struct Bill_request_Storage {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *start;
  NSString *amount;
} Bill_request_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = Bill_request_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Bill_request_Storage, username),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "start",
        .number = Bill_request_FieldNumber_Start,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Bill_request_Storage, start),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = Bill_request_FieldNumber_Amount,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Bill_request_Storage, amount),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Bill_request class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Bill_request_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Syn_data

@implementation Syn_data

@dynamic friend_p;
@dynamic bill;
@dynamic delete_p;

typedef struct Syn_data_Storage {
  uint32_t _has_storage_[1];
  NSString *friend_p;
  NSString *bill;
  NSString *delete_p;
} Syn_data_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friend_p",
        .number = Syn_data_FieldNumber_Friend_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Syn_data_Storage, friend_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bill",
        .number = Syn_data_FieldNumber_Bill,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Syn_data_Storage, bill),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "delete_p",
        .number = Syn_data_FieldNumber_Delete_p,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Syn_data_Storage, delete_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Syn_data class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Syn_data_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - HelloRequest

@implementation HelloRequest

@dynamic name;

typedef struct HelloRequest_Storage {
  uint32_t _has_storage_[1];
  NSString *name;
} HelloRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = HelloRequest_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(HelloRequest_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[HelloRequest class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(HelloRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - HelloReply

@implementation HelloReply

@dynamic message;

typedef struct HelloReply_Storage {
  uint32_t _has_storage_[1];
  NSString *message;
} HelloReply_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .number = HelloReply_FieldNumber_Message,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(HelloReply_Storage, message),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[HelloReply class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(HelloReply_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - Image

@implementation Image

@dynamic name;
@dynamic data_p;

typedef struct Image_Storage {
  uint32_t _has_storage_[1];
  NSString *name;
  NSData *data_p;
} Image_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = Image_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(Image_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "data_p",
        .number = Image_FieldNumber_Data_p,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeData,
        .offset = offsetof(Image_Storage, data_p),
        .defaultValue.valueData = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[Image class]
                                              rootClass:[IShareRoot class]
                                                   file:IShareRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(Image_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
