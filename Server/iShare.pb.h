// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iShare.proto

#ifndef PROTOBUF_iShare_2eproto__INCLUDED
#define PROTOBUF_iShare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_iShare_2eproto();
void protobuf_AssignDesc_iShare_2eproto();
void protobuf_ShutdownFile_iShare_2eproto();

class Login_m;
class Sign_m;
class Inf;
class Repeated_string;
class User_detail;
class Share_inf;
class Bill_request;
class Syn_data;
class HelloRequest;
class HelloReply;
class Image;

// ===================================================================

class Login_m : public ::google::protobuf::Message {
 public:
  Login_m();
  virtual ~Login_m();

  Login_m(const Login_m& from);

  inline Login_m& operator=(const Login_m& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_m& default_instance();

  void Swap(Login_m* other);

  // implements Message ----------------------------------------------

  inline Login_m* New() const { return New(NULL); }

  Login_m* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_m& from);
  void MergeFrom(const Login_m& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login_m* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:helloworld.Login_m)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Login_m* default_instance_;
};
// -------------------------------------------------------------------

class Sign_m : public ::google::protobuf::Message {
 public:
  Sign_m();
  virtual ~Sign_m();

  Sign_m(const Sign_m& from);

  inline Sign_m& operator=(const Sign_m& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sign_m& default_instance();

  void Swap(Sign_m* other);

  // implements Message ----------------------------------------------

  inline Sign_m* New() const { return New(NULL); }

  Sign_m* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sign_m& from);
  void MergeFrom(const Sign_m& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sign_m* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:helloworld.Sign_m)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Sign_m* default_instance_;
};
// -------------------------------------------------------------------

class Inf : public ::google::protobuf::Message {
 public:
  Inf();
  virtual ~Inf();

  Inf(const Inf& from);

  inline Inf& operator=(const Inf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inf& default_instance();

  void Swap(Inf* other);

  // implements Message ----------------------------------------------

  inline Inf* New() const { return New(NULL); }

  Inf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inf& from);
  void MergeFrom(const Inf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Inf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string information = 1;
  void clear_information();
  static const int kInformationFieldNumber = 1;
  const ::std::string& information() const;
  void set_information(const ::std::string& value);
  void set_information(const char* value);
  void set_information(const char* value, size_t size);
  ::std::string* mutable_information();
  ::std::string* release_information();
  void set_allocated_information(::std::string* information);

  // @@protoc_insertion_point(class_scope:helloworld.Inf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr information_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Inf* default_instance_;
};
// -------------------------------------------------------------------

class Repeated_string : public ::google::protobuf::Message {
 public:
  Repeated_string();
  virtual ~Repeated_string();

  Repeated_string(const Repeated_string& from);

  inline Repeated_string& operator=(const Repeated_string& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Repeated_string& default_instance();

  void Swap(Repeated_string* other);

  // implements Message ----------------------------------------------

  inline Repeated_string* New() const { return New(NULL); }

  Repeated_string* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Repeated_string& from);
  void MergeFrom(const Repeated_string& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Repeated_string* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string content = 1;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  void set_content(int index, const char* value);
  void set_content(int index, const char* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  void add_content(const char* value);
  void add_content(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_content();

  // @@protoc_insertion_point(class_scope:helloworld.Repeated_string)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> content_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Repeated_string* default_instance_;
};
// -------------------------------------------------------------------

class User_detail : public ::google::protobuf::Message {
 public:
  User_detail();
  virtual ~User_detail();

  User_detail(const User_detail& from);

  inline User_detail& operator=(const User_detail& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User_detail& default_instance();

  void Swap(User_detail* other);

  // implements Message ----------------------------------------------

  inline User_detail* New() const { return New(NULL); }

  User_detail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User_detail& from);
  void MergeFrom(const User_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User_detail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string email = 2;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // repeated string friends = 3;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 3;
  const ::std::string& friends(int index) const;
  ::std::string* mutable_friends(int index);
  void set_friends(int index, const ::std::string& value);
  void set_friends(int index, const char* value);
  void set_friends(int index, const char* value, size_t size);
  ::std::string* add_friends();
  void add_friends(const ::std::string& value);
  void add_friends(const char* value);
  void add_friends(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& friends() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friends();

  // @@protoc_insertion_point(class_scope:helloworld.User_detail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friends_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static User_detail* default_instance_;
};
// -------------------------------------------------------------------

class Share_inf : public ::google::protobuf::Message {
 public:
  Share_inf();
  virtual ~Share_inf();

  Share_inf(const Share_inf& from);

  inline Share_inf& operator=(const Share_inf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Share_inf& default_instance();

  void Swap(Share_inf* other);

  // implements Message ----------------------------------------------

  inline Share_inf* New() const { return New(NULL); }

  Share_inf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Share_inf& from);
  void MergeFrom(const Share_inf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Share_inf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string creater = 1;
  void clear_creater();
  static const int kCreaterFieldNumber = 1;
  const ::std::string& creater() const;
  void set_creater(const ::std::string& value);
  void set_creater(const char* value);
  void set_creater(const char* value, size_t size);
  ::std::string* mutable_creater();
  ::std::string* release_creater();
  void set_allocated_creater(::std::string* creater);

  // optional string amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string account = 4;
  void clear_account();
  static const int kAccountFieldNumber = 4;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string note = 6;
  void clear_note();
  static const int kNoteFieldNumber = 6;
  const ::std::string& note() const;
  void set_note(const ::std::string& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  ::std::string* mutable_note();
  ::std::string* release_note();
  void set_allocated_note(::std::string* note);

  // optional string image = 7;
  void clear_image();
  static const int kImageFieldNumber = 7;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // repeated string members = 8;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 8;
  const ::std::string& members(int index) const;
  ::std::string* mutable_members(int index);
  void set_members(int index, const ::std::string& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  ::std::string* add_members();
  void add_members(const ::std::string& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // optional int32 members_count = 9;
  void clear_members_count();
  static const int kMembersCountFieldNumber = 9;
  ::google::protobuf::int32 members_count() const;
  void set_members_count(::google::protobuf::int32 value);

  // optional string bill_id = 10;
  void clear_bill_id();
  static const int kBillIdFieldNumber = 10;
  const ::std::string& bill_id() const;
  void set_bill_id(const ::std::string& value);
  void set_bill_id(const char* value);
  void set_bill_id(const char* value, size_t size);
  ::std::string* mutable_bill_id();
  ::std::string* release_bill_id();
  void set_allocated_bill_id(::std::string* bill_id);

  // @@protoc_insertion_point(class_scope:helloworld.Share_inf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr creater_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr note_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::google::protobuf::internal::ArenaStringPtr bill_id_;
  ::google::protobuf::int32 members_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Share_inf* default_instance_;
};
// -------------------------------------------------------------------

class Bill_request : public ::google::protobuf::Message {
 public:
  Bill_request();
  virtual ~Bill_request();

  Bill_request(const Bill_request& from);

  inline Bill_request& operator=(const Bill_request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bill_request& default_instance();

  void Swap(Bill_request* other);

  // implements Message ----------------------------------------------

  inline Bill_request* New() const { return New(NULL); }

  Bill_request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bill_request& from);
  void MergeFrom(const Bill_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bill_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::std::string& start() const;
  void set_start(const ::std::string& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  ::std::string* mutable_start();
  ::std::string* release_start();
  void set_allocated_start(::std::string* start);

  // optional string amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // @@protoc_insertion_point(class_scope:helloworld.Bill_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr start_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Bill_request* default_instance_;
};
// -------------------------------------------------------------------

class Syn_data : public ::google::protobuf::Message {
 public:
  Syn_data();
  virtual ~Syn_data();

  Syn_data(const Syn_data& from);

  inline Syn_data& operator=(const Syn_data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Syn_data& default_instance();

  void Swap(Syn_data* other);

  // implements Message ----------------------------------------------

  inline Syn_data* New() const { return New(NULL); }

  Syn_data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Syn_data& from);
  void MergeFrom(const Syn_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Syn_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string friend = 1;
  void clear_friend_();
  static const int kFriendFieldNumber = 1;
  const ::std::string& friend_() const;
  void set_friend_(const ::std::string& value);
  void set_friend_(const char* value);
  void set_friend_(const char* value, size_t size);
  ::std::string* mutable_friend_();
  ::std::string* release_friend_();
  void set_allocated_friend_(::std::string* friend_);

  // optional string bill = 2;
  void clear_bill();
  static const int kBillFieldNumber = 2;
  const ::std::string& bill() const;
  void set_bill(const ::std::string& value);
  void set_bill(const char* value);
  void set_bill(const char* value, size_t size);
  ::std::string* mutable_bill();
  ::std::string* release_bill();
  void set_allocated_bill(::std::string* bill);

  // optional string delete = 3;
  void clear_delete_();
  static const int kDeleteFieldNumber = 3;
  const ::std::string& delete_() const;
  void set_delete_(const ::std::string& value);
  void set_delete_(const char* value);
  void set_delete_(const char* value, size_t size);
  ::std::string* mutable_delete_();
  ::std::string* release_delete_();
  void set_allocated_delete_(::std::string* delete_);

  // @@protoc_insertion_point(class_scope:helloworld.Syn_data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr friend__;
  ::google::protobuf::internal::ArenaStringPtr bill_;
  ::google::protobuf::internal::ArenaStringPtr delete__;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Syn_data* default_instance_;
};
// -------------------------------------------------------------------

class HelloRequest : public ::google::protobuf::Message {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  void Swap(HelloRequest* other);

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const { return New(NULL); }

  HelloRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:helloworld.HelloRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static HelloRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelloReply : public ::google::protobuf::Message {
 public:
  HelloReply();
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply& default_instance();

  void Swap(HelloReply* other);

  // implements Message ----------------------------------------------

  inline HelloReply* New() const { return New(NULL); }

  HelloReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:helloworld.HelloReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static HelloReply* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:helloworld.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_iShare_2eproto();
  friend void protobuf_AssignDesc_iShare_2eproto();
  friend void protobuf_ShutdownFile_iShare_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Login_m

// optional string username = 1;
inline void Login_m::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_m::username() const {
  // @@protoc_insertion_point(field_get:helloworld.Login_m.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_m::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Login_m.username)
}
inline void Login_m::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Login_m.username)
}
inline void Login_m::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Login_m.username)
}
inline ::std::string* Login_m::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Login_m.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_m::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_m::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Login_m.username)
}

// optional string password = 2;
inline void Login_m::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_m::password() const {
  // @@protoc_insertion_point(field_get:helloworld.Login_m.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_m::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Login_m.password)
}
inline void Login_m::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Login_m.password)
}
inline void Login_m::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Login_m.password)
}
inline ::std::string* Login_m::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Login_m.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_m::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_m::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Login_m.password)
}

// -------------------------------------------------------------------

// Sign_m

// optional string username = 1;
inline void Sign_m::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sign_m::username() const {
  // @@protoc_insertion_point(field_get:helloworld.Sign_m.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sign_m::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Sign_m.username)
}
inline void Sign_m::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Sign_m.username)
}
inline void Sign_m::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Sign_m.username)
}
inline ::std::string* Sign_m::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Sign_m.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sign_m::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sign_m::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Sign_m.username)
}

// optional string password = 2;
inline void Sign_m::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sign_m::password() const {
  // @@protoc_insertion_point(field_get:helloworld.Sign_m.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sign_m::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Sign_m.password)
}
inline void Sign_m::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Sign_m.password)
}
inline void Sign_m::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Sign_m.password)
}
inline ::std::string* Sign_m::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Sign_m.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sign_m::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sign_m::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Sign_m.password)
}

// optional string email = 3;
inline void Sign_m::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sign_m::email() const {
  // @@protoc_insertion_point(field_get:helloworld.Sign_m.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sign_m::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Sign_m.email)
}
inline void Sign_m::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Sign_m.email)
}
inline void Sign_m::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Sign_m.email)
}
inline ::std::string* Sign_m::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Sign_m.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sign_m::release_email() {
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sign_m::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Sign_m.email)
}

// -------------------------------------------------------------------

// Inf

// optional string information = 1;
inline void Inf::clear_information() {
  information_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Inf::information() const {
  // @@protoc_insertion_point(field_get:helloworld.Inf.information)
  return information_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Inf::set_information(const ::std::string& value) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Inf.information)
}
inline void Inf::set_information(const char* value) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Inf.information)
}
inline void Inf::set_information(const char* value, size_t size) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Inf.information)
}
inline ::std::string* Inf::mutable_information() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Inf.information)
  return information_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Inf::release_information() {
  
  return information_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Inf::set_allocated_information(::std::string* information) {
  if (information != NULL) {
    
  } else {
    
  }
  information_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), information);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Inf.information)
}

// -------------------------------------------------------------------

// Repeated_string

// repeated string content = 1;
inline int Repeated_string::content_size() const {
  return content_.size();
}
inline void Repeated_string::clear_content() {
  content_.Clear();
}
inline const ::std::string& Repeated_string::content(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.Repeated_string.content)
  return content_.Get(index);
}
inline ::std::string* Repeated_string::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.Repeated_string.content)
  return content_.Mutable(index);
}
inline void Repeated_string::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:helloworld.Repeated_string.content)
  content_.Mutable(index)->assign(value);
}
inline void Repeated_string::set_content(int index, const char* value) {
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.Repeated_string.content)
}
inline void Repeated_string::set_content(int index, const char* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.Repeated_string.content)
}
inline ::std::string* Repeated_string::add_content() {
  return content_.Add();
}
inline void Repeated_string::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloworld.Repeated_string.content)
}
inline void Repeated_string::add_content(const char* value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloworld.Repeated_string.content)
}
inline void Repeated_string::add_content(const char* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloworld.Repeated_string.content)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Repeated_string::content() const {
  // @@protoc_insertion_point(field_list:helloworld.Repeated_string.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Repeated_string::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.Repeated_string.content)
  return &content_;
}

// -------------------------------------------------------------------

// User_detail

// optional string username = 1;
inline void User_detail::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_detail::username() const {
  // @@protoc_insertion_point(field_get:helloworld.User_detail.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_detail::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.User_detail.username)
}
inline void User_detail::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.User_detail.username)
}
inline void User_detail::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.User_detail.username)
}
inline ::std::string* User_detail::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.User_detail.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_detail::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_detail::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:helloworld.User_detail.username)
}

// optional string email = 2;
inline void User_detail::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_detail::email() const {
  // @@protoc_insertion_point(field_get:helloworld.User_detail.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_detail::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.User_detail.email)
}
inline void User_detail::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.User_detail.email)
}
inline void User_detail::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.User_detail.email)
}
inline ::std::string* User_detail::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.User_detail.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_detail::release_email() {
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_detail::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:helloworld.User_detail.email)
}

// repeated string friends = 3;
inline int User_detail::friends_size() const {
  return friends_.size();
}
inline void User_detail::clear_friends() {
  friends_.Clear();
}
inline const ::std::string& User_detail::friends(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.User_detail.friends)
  return friends_.Get(index);
}
inline ::std::string* User_detail::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.User_detail.friends)
  return friends_.Mutable(index);
}
inline void User_detail::set_friends(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:helloworld.User_detail.friends)
  friends_.Mutable(index)->assign(value);
}
inline void User_detail::set_friends(int index, const char* value) {
  friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.User_detail.friends)
}
inline void User_detail::set_friends(int index, const char* value, size_t size) {
  friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.User_detail.friends)
}
inline ::std::string* User_detail::add_friends() {
  return friends_.Add();
}
inline void User_detail::add_friends(const ::std::string& value) {
  friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloworld.User_detail.friends)
}
inline void User_detail::add_friends(const char* value) {
  friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloworld.User_detail.friends)
}
inline void User_detail::add_friends(const char* value, size_t size) {
  friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloworld.User_detail.friends)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User_detail::friends() const {
  // @@protoc_insertion_point(field_list:helloworld.User_detail.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User_detail::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.User_detail.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// Share_inf

// optional string creater = 1;
inline void Share_inf::clear_creater() {
  creater_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::creater() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.creater)
  return creater_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_creater(const ::std::string& value) {
  
  creater_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.creater)
}
inline void Share_inf::set_creater(const char* value) {
  
  creater_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.creater)
}
inline void Share_inf::set_creater(const char* value, size_t size) {
  
  creater_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.creater)
}
inline ::std::string* Share_inf::mutable_creater() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.creater)
  return creater_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_creater() {
  
  return creater_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_creater(::std::string* creater) {
  if (creater != NULL) {
    
  } else {
    
  }
  creater_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creater);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.creater)
}

// optional string amount = 2;
inline void Share_inf::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::amount() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.amount)
}
inline void Share_inf::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.amount)
}
inline void Share_inf::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.amount)
}
inline ::std::string* Share_inf::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.amount)
}

// optional string type = 3;
inline void Share_inf::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::type() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.type)
}
inline void Share_inf::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.type)
}
inline void Share_inf::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.type)
}
inline ::std::string* Share_inf::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.type)
}

// optional string account = 4;
inline void Share_inf::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::account() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.account)
}
inline void Share_inf::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.account)
}
inline void Share_inf::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.account)
}
inline ::std::string* Share_inf::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_account() {
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.account)
}

// optional string data = 5;
inline void Share_inf::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::data() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.data)
}
inline void Share_inf::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.data)
}
inline void Share_inf::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.data)
}
inline ::std::string* Share_inf::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.data)
}

// optional string note = 6;
inline void Share_inf::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::note() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.note)
  return note_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_note(const ::std::string& value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.note)
}
inline void Share_inf::set_note(const char* value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.note)
}
inline void Share_inf::set_note(const char* value, size_t size) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.note)
}
inline ::std::string* Share_inf::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_note() {
  
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.note)
}

// optional string image = 7;
inline void Share_inf::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::image() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.image)
}
inline void Share_inf::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.image)
}
inline void Share_inf::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.image)
}
inline ::std::string* Share_inf::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_image() {
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.image)
}

// repeated string members = 8;
inline int Share_inf::members_size() const {
  return members_.size();
}
inline void Share_inf::clear_members() {
  members_.Clear();
}
inline const ::std::string& Share_inf::members(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.members)
  return members_.Get(index);
}
inline ::std::string* Share_inf::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.members)
  return members_.Mutable(index);
}
inline void Share_inf::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.members)
  members_.Mutable(index)->assign(value);
}
inline void Share_inf::set_members(int index, const char* value) {
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.members)
}
inline void Share_inf::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.members)
}
inline ::std::string* Share_inf::add_members() {
  return members_.Add();
}
inline void Share_inf::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloworld.Share_inf.members)
}
inline void Share_inf::add_members(const char* value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloworld.Share_inf.members)
}
inline void Share_inf::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloworld.Share_inf.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Share_inf::members() const {
  // @@protoc_insertion_point(field_list:helloworld.Share_inf.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Share_inf::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.Share_inf.members)
  return &members_;
}

// optional int32 members_count = 9;
inline void Share_inf::clear_members_count() {
  members_count_ = 0;
}
inline ::google::protobuf::int32 Share_inf::members_count() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.members_count)
  return members_count_;
}
inline void Share_inf::set_members_count(::google::protobuf::int32 value) {
  
  members_count_ = value;
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.members_count)
}

// optional string bill_id = 10;
inline void Share_inf::clear_bill_id() {
  bill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share_inf::bill_id() const {
  // @@protoc_insertion_point(field_get:helloworld.Share_inf.bill_id)
  return bill_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_bill_id(const ::std::string& value) {
  
  bill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Share_inf.bill_id)
}
inline void Share_inf::set_bill_id(const char* value) {
  
  bill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Share_inf.bill_id)
}
inline void Share_inf::set_bill_id(const char* value, size_t size) {
  
  bill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Share_inf.bill_id)
}
inline ::std::string* Share_inf::mutable_bill_id() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Share_inf.bill_id)
  return bill_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share_inf::release_bill_id() {
  
  return bill_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share_inf::set_allocated_bill_id(::std::string* bill_id) {
  if (bill_id != NULL) {
    
  } else {
    
  }
  bill_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bill_id);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Share_inf.bill_id)
}

// -------------------------------------------------------------------

// Bill_request

// optional string username = 1;
inline void Bill_request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bill_request::username() const {
  // @@protoc_insertion_point(field_get:helloworld.Bill_request.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bill_request::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Bill_request.username)
}
inline void Bill_request::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Bill_request.username)
}
inline void Bill_request::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Bill_request.username)
}
inline ::std::string* Bill_request::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Bill_request.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bill_request::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bill_request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Bill_request.username)
}

// optional string start = 2;
inline void Bill_request::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bill_request::start() const {
  // @@protoc_insertion_point(field_get:helloworld.Bill_request.start)
  return start_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bill_request::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Bill_request.start)
}
inline void Bill_request::set_start(const char* value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Bill_request.start)
}
inline void Bill_request::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Bill_request.start)
}
inline ::std::string* Bill_request::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Bill_request.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bill_request::release_start() {
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bill_request::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Bill_request.start)
}

// optional string amount = 3;
inline void Bill_request::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bill_request::amount() const {
  // @@protoc_insertion_point(field_get:helloworld.Bill_request.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bill_request::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Bill_request.amount)
}
inline void Bill_request::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Bill_request.amount)
}
inline void Bill_request::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Bill_request.amount)
}
inline ::std::string* Bill_request::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Bill_request.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bill_request::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bill_request::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Bill_request.amount)
}

// -------------------------------------------------------------------

// Syn_data

// optional string friend = 1;
inline void Syn_data::clear_friend_() {
  friend__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Syn_data::friend_() const {
  // @@protoc_insertion_point(field_get:helloworld.Syn_data.friend)
  return friend__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Syn_data::set_friend_(const ::std::string& value) {
  
  friend__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Syn_data.friend)
}
inline void Syn_data::set_friend_(const char* value) {
  
  friend__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Syn_data.friend)
}
inline void Syn_data::set_friend_(const char* value, size_t size) {
  
  friend__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Syn_data.friend)
}
inline ::std::string* Syn_data::mutable_friend_() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Syn_data.friend)
  return friend__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Syn_data::release_friend_() {
  
  return friend__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Syn_data::set_allocated_friend_(::std::string* friend_) {
  if (friend_ != NULL) {
    
  } else {
    
  }
  friend__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Syn_data.friend)
}

// optional string bill = 2;
inline void Syn_data::clear_bill() {
  bill_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Syn_data::bill() const {
  // @@protoc_insertion_point(field_get:helloworld.Syn_data.bill)
  return bill_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Syn_data::set_bill(const ::std::string& value) {
  
  bill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Syn_data.bill)
}
inline void Syn_data::set_bill(const char* value) {
  
  bill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Syn_data.bill)
}
inline void Syn_data::set_bill(const char* value, size_t size) {
  
  bill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Syn_data.bill)
}
inline ::std::string* Syn_data::mutable_bill() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Syn_data.bill)
  return bill_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Syn_data::release_bill() {
  
  return bill_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Syn_data::set_allocated_bill(::std::string* bill) {
  if (bill != NULL) {
    
  } else {
    
  }
  bill_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bill);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Syn_data.bill)
}

// optional string delete = 3;
inline void Syn_data::clear_delete_() {
  delete__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Syn_data::delete_() const {
  // @@protoc_insertion_point(field_get:helloworld.Syn_data.delete)
  return delete__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Syn_data::set_delete_(const ::std::string& value) {
  
  delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Syn_data.delete)
}
inline void Syn_data::set_delete_(const char* value) {
  
  delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Syn_data.delete)
}
inline void Syn_data::set_delete_(const char* value, size_t size) {
  
  delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Syn_data.delete)
}
inline ::std::string* Syn_data::mutable_delete_() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Syn_data.delete)
  return delete__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Syn_data::release_delete_() {
  
  return delete__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Syn_data::set_allocated_delete_(::std::string* delete_) {
  if (delete_ != NULL) {
    
  } else {
    
  }
  delete__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delete_);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Syn_data.delete)
}

// -------------------------------------------------------------------

// HelloRequest

// optional string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.HelloRequest.name)
}
inline ::std::string* HelloRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.HelloRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// optional string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.message)
}
inline void HelloReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.HelloReply.message)
}
inline void HelloReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.HelloReply.message)
}
inline ::std::string* HelloReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.HelloReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReply::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloReply.message)
}

// -------------------------------------------------------------------

// Image

// optional string name = 1;
inline void Image::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::name() const {
  // @@protoc_insertion_point(field_get:helloworld.Image.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Image.name)
}
inline void Image::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Image.name)
}
inline void Image::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Image.name)
}
inline ::std::string* Image::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Image.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Image.name)
}

// optional bytes data = 2;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:helloworld.Image.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.Image.data)
}
inline void Image::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.Image.data)
}
inline ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:helloworld.Image.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iShare_2eproto__INCLUDED
